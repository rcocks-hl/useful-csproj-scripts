# Generated by Claude.AI
# Modified by Richard Cocks
# 
# Known limitations - Requires consistent versioning of dependencies before centralising

# Get all *.csproj files in the current directory and subdirectories
$csprojFiles = Get-ChildItem -Recurse -Filter *.csproj

# Create a hashtable to store package versions
$packageVersions = @{}

foreach ($file in $csprojFiles) {
    $content = Get-Content $file.FullName -Raw
    $xml = [xml]$content
    $modified = $false

    # Remove Version attributes from PackageReference elements and store them
    $packageReferences = $xml.SelectNodes("//PackageReference")
    foreach ($packageReference in $packageReferences) {
        $packageId = $packageReference.GetAttribute("Include")
        $packageVersion = $packageReference.GetAttribute("Version")
        if ($packageVersion) {
            $packageVersions[$packageId] = $packageVersion
            $packageReference.RemoveAttribute("Version")
            $modified = $true
        }
    }

    # Remove ManagePackageVersionsCentrally property if it exists
    $propertyGroups = $xml.SelectNodes("//PropertyGroup")
    foreach ($propertyGroup in $propertyGroups) {
        $managePackageVersionsCentrally = $propertyGroup.SelectSingleNode("ManagePackageVersionsCentrally")
        if ($managePackageVersionsCentrally) {
            $propertyGroup.RemoveChild($managePackageVersionsCentrally)
            $modified = $true
        }
    }

    # Save the modified XML back to the file if changes were made
    if ($modified) {
        $xml.Save($file.FullName)
        Write-Host "Updated $($file.FullName) to use Central Package Management"
    } else {
        Write-Host "No changes needed for $($file.FullName)"
    }
}

# Create or update Directory.Packages.props file
$directoryPackagesPropsPath = Join-Path $PWD "Directory.Packages.props"
$directoryPackagesPropsContent = @"
<Project>
  <PropertyGroup>
    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
  </PropertyGroup>
  <ItemGroup>
$($packageVersions.GetEnumerator() | ForEach-Object { "    <PackageVersion Include=`"$($_.Key)`" Version=`"$($_.Value)`" />" })
  </ItemGroup>
</Project>
"@

Set-Content -Path $directoryPackagesPropsPath -Value $directoryPackagesPropsContent

Write-Host "Created/Updated Directory.Packages.props file at $directoryPackagesPropsPath"
Write-Host "Finished processing all *.csproj files"
